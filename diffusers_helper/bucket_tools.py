bucket_options = {
    "640": [
        [416, 960], [448, 864], [480, 832], [512, 768], [544, 704],
        [576, 672], [608, 640],[640,640], [640, 608], [672, 576], [704, 544],
        [768, 512], [832, 480], [864, 448], [960, 416]
    ],
    "720": [
        [480, 1088], [512, 960], [544, 928], [576, 864], [608, 800],
        [640, 768], [672, 736],[704, 704],[736, 672], [768, 640], [800, 608],
        [864, 576], [928, 544], [960, 512], [1088, 480]
    ],
    "480": [
        [320, 736], [352, 640], [384, 576], [416, 544], [448, 480],
        [448, 512], [480, 448], [480,480],[512, 448], [544, 416], [576, 384],
        [640, 352], [736, 320]
    ],
    "320": [
        [224, 448], [224, 480], [256, 384], [256, 416], [288, 352],
        [320, 320], [352, 288], [384, 256], [416, 256], [448, 224],
        [480, 224]
    ],
    "240": [
        [160, 320], [160, 352], [192, 256], [192, 288], [192, 320],
        [224, 256],[256, 256], [256, 192], [256, 224], [288, 192], [320, 160],
        [320, 192], [352, 160]
    ],
    "840": [
        [560, 1280], [608, 1120], [640, 1088], [672, 1008], [704, 928],
        [736, 896], [784, 864],[832, 832], [864, 784], [896, 736], [928, 704],
        [1008, 672], [1088, 640], [1120, 608], [1280, 560]
    ],
    "960": [
        [640, 1472], [704, 1280], [736, 1248], [768, 1152], [800, 1056],
        [832, 1024], [896, 992],[960, 960], [992, 896], [1024, 832], [1056, 800],
        [1152, 768], [1248, 736], [1280, 704], [1472, 640]
    ],
    "1080": [
        [736, 1568], [832, 1376], [896, 1280], [960, 1184], [992, 1152],
        [1024, 1120], [1056, 1088], [1088, 1088],[1088, 1056], [1120, 1024], [1152, 992],
        [1184, 960], [1280, 896], [1376, 832], [1568, 736]
    ],
"1200": [
        [864, 1600], [960, 1472], [992, 1408], [1024, 1344], [1088, 1280],
        [1120, 1248], [1152, 1216], [1184, 1184], [1216, 1152], [1248, 1120],
        [1280, 1088], [1344, 1024], [1408, 992], [1472, 960], [1600, 864]
    ],
"1320": [
        [928, 1856], [992, 1728], [1056, 1632], [1120, 1536], [1184, 1440],
        [1248, 1376], [1280, 1344], [1312, 1312], [1344, 1280], [1376, 1248],
        [1440, 1184], [1536, 1120], [1632, 1056], [1728, 992], [1856, 928]
    ],
"1440": [
        [896, 2304], [1024, 2016], [1088, 1920], [1184, 1760], [1280, 1632],
        [1344, 1536], [1408, 1472], [1440, 1440], [1472, 1408], [1536, 1344],
        [1632, 1280], [1760, 1184], [1920, 1088], [2016, 1024], [2304, 896]
    ]
}


def find_nearest_bucket(h, w, resolution=640):
    min_metric = float('inf')
    best_bucket = None
    for (bucket_h, bucket_w) in bucket_options[resolution]:
        metric = abs(h * bucket_w - w * bucket_h)
        if metric <= min_metric:
            min_metric = metric
            best_bucket = (bucket_h, bucket_w)
    #print(f"Found best resolution bucket {bucket_w} x {bucket_h}")       
    return best_bucket

